{"componentChunkName":"component---src-templates-blog-post-js","path":"/cxx/[cppcon-2019]-a-unifying-abstraction-for-async-in-c++/","result":{"data":{"site":{"siteMetadata":{"title":"zyounan's blog","author":"zyounan","siteUrl":"https://zyounan.github.io","comment":{"disqusShortName":"","utterances":""},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"643c9297-bacc-5b11-b5d1-95e2cf1056ed","excerpt":"视频地址\nSlides","html":"<p><a href=\"https://www.youtube.com/watch?v=tF-Nz4aRWAM\">视频地址</a>\n<a href=\"https://github.com/CppCon/CppCon2019/blob/master/Presentations/a_unifying_abstraction_for_async_in_cpp/a_unifying_abstraction_for_async_in_cpp__eric_niebler_david_s_hollman__cppcon_2019.pdf\">Slides</a></p>\n<!-- separate -->\n<ol>\n<li>Parallelism vs Concurrency</li>\n</ol>\n<p>Parallelism: 多个并行执行的任务，之间没有内部的依赖关系。Schedular 可以自由调度线程之间的执行<br>\nConcurrency: 多个逻辑线程，之间有<strong>未知的</strong>依赖关系。调度器不一定能够知道完整的这些依赖关系。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">std<span class=\"token operator\">::</span>atomic<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Worker A</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Worker B</span>\nx<span class=\"token punctuation\">.</span><span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>调度器没有义务保证任务 A 一定要输出 <code class=\"language-text\">Hello</code>（可以一直选择调度 A 而忽略 B）。除非满足 <em>Concurrent forward progress guarantee</em></p>\n<p>Parallelism 给调度器提供了更多的自由度；而 Concurrency 给了用户提供了更多的自由度.  </p>\n<p>Concurrency 拥有比串行执行更强的调度保证 (Scheduling guarantee).  </p>\n<p>使用 “Concurrency” 模拟 “Parallelism” 的时候，其实是有额外的开销的。</p>\n<p>C++ 17 引入了 parallel 算法，它们的速度就比使用线程池或者线程快。原因就在于它们直接让用户告诉调度器，这些任务之间的依赖在哪里。换句话说，它们把整个任务的依赖关系图告诉了调度器。但是当你用 concurrency 的技术的时候，即使这些任务没有依赖关系，调度器也会假定这些任务之间存在依赖，以引入不必要的开销。</p>\n<ol start=\"2\">\n<li>Senders and Recievers</li>\n</ol>\n<h3 id=\"code-classlanguage-textstdpromisefuturecode-就是慢\" style=\"position:relative;\"><a href=\"#code-classlanguage-textstdpromisefuturecode-%E5%B0%B1%E6%98%AF%E6%85%A2\" aria-label=\"code classlanguage textstdpromisefuturecode 就是慢 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>”<code class=\"language-text\">std::promise/future</code> 就是慢!”</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">std<span class=\"token operator\">::</span>future<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">async_algo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span>promise<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">auto</span> f <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">get_future</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>thread t <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span>p <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">mutable</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token comment\">// something</span>\n            p<span class=\"token punctuation\">.</span><span class=\"token function\">set_value</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    t<span class=\"token punctuation\">.</span><span class=\"token function\">detach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">auto</span> f <span class=\"token operator\">=</span> <span class=\"token function\">async_algo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">auto</span> f2 <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">promise</code> 和 <code class=\"language-text\">future</code> 包含什么？</p>\n<ul>\n<li><code class=\"language-text\">value</code></li>\n<li><code class=\"language-text\">continuation</code></li>\n<li><code class=\"language-text\">mutex</code></li>\n<li><code class=\"language-text\">cond var</code></li>\n<li><code class=\"language-text\">ref count</code>\n这里，<code class=\"language-text\">p.set_value</code> 和 <code class=\"language-text\">f.then</code> 引入了不必要的同步开销。</li>\n</ul>\n<p>我们可以把 <code class=\"language-text\">then</code> 移到 <code class=\"language-text\">async_algo</code> 里（向 <code class=\"language-text\">async_algo</code> 传递一个 <code class=\"language-text\">continuation</code>），或者泛化一下……</p>\n<p>延迟启动 <code class=\"language-text\">async work</code>，在启动任务之前让 <code class=\"language-text\">caller</code> 把 <code class=\"language-text\">continuation</code> 添加到 <code class=\"language-text\">async work</code> 中。</p>\n<h3 id=\"lazy-future\" style=\"position:relative;\"><a href=\"#lazy-future\" aria-label=\"lazy future permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lazy Future</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">auto</span> <span class=\"token function\">async_algo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// It is a lazy future</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> promise<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        std<span class=\"token operator\">::</span>thread t <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">[</span>p <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">mutable</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token comment\">//...</span>\n                p<span class=\"token punctuation\">.</span><span class=\"token function\">set_value</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">detach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">auto</span> f <span class=\"token operator\">=</span> <span class=\"token function\">async_algo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">auto</span> f2 <span class=\"token operator\">=</span> <span class=\"token function\">then</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>怎么实现 <code class=\"language-text\">then</code> 呢？</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">auto</span> <span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> task<span class=\"token punctuation\">,</span> <span class=\"token keyword\">auto</span> fun<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// return a lazy future</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">promise</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> p_<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>fun<span class=\"token punctuation\">)</span> func_<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">void</span> <span class=\"token function\">set_value</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> p_<span class=\"token punctuation\">.</span><span class=\"token function\">set_value</span><span class=\"token punctuation\">(</span><span class=\"token function\">func_</span><span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">void</span> <span class=\"token function\">set_exception</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> p_<span class=\"token punctuation\">.</span><span class=\"token function\">set_exception</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">task</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">{</span>p<span class=\"token punctuation\">,</span> fun<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但是这样子我们只是简单地把任务组装在了一起，我们还需要做一个同步等待……</p>\n<h3 id=\"blocking\" style=\"position:relative;\"><a href=\"#blocking\" aria-label=\"blocking permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Blocking</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Task</span><span class=\"token operator\">></span>\nT <span class=\"token function\">sync_wait</span><span class=\"token punctuation\">(</span>Task task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_state</span> <span class=\"token punctuation\">{</span>\n        mutex mtx<span class=\"token punctuation\">;</span>\n        condition_variable cv<span class=\"token punctuation\">;</span>\n        variant<span class=\"token operator\">&lt;</span>monostate<span class=\"token punctuation\">,</span> exception_ptr<span class=\"token punctuation\">,</span> T<span class=\"token operator\">></span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">final_promise</span> <span class=\"token punctuation\">{</span>\n        _state<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">*</span> pst<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span> I<span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">_set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>xs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">auto</span> lk <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>unique_lock <span class=\"token punctuation\">{</span>pst<span class=\"token operator\">-></span>mtx<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            pst<span class=\"token operator\">-></span>data<span class=\"token punctuation\">.</span><span class=\"token keyword\">template</span> emplace<span class=\"token operator\">&lt;</span>I<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pst<span class=\"token operator\">-></span>cv<span class=\"token punctuation\">.</span><span class=\"token function\">notify_one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">void</span> <span class=\"token function\">set_value</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> _set<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">set_exception</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> _set<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// state</span>\n    _state<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// launch the task</span>\n    <span class=\"token function\">task</span><span class=\"token punctuation\">(</span>final_promise<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token operator\">&amp;</span>state<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">auto</span> lk <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>unique_lock <span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>mtx<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        state<span class=\"token punctuation\">.</span>cv<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>lk<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>state<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Handle the exception...</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> \n        std<span class=\"token operator\">::</span><span class=\"token function\">rethrow_exception</span><span class=\"token punctuation\">(</span>get<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> get<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"「cppcon-2019」A Unifying Abstraction for Async in C++","date":"April 19, 2021"}}},"pageContext":{"slug":"/cxx/[cppcon-2019]-a-unifying-abstraction-for-async-in-c++/","previous":{"fields":{"slug":"/cxx/[cppcon-2018]-rvo-harder-than-it-looks/"},"frontmatter":{"title":"「cppcon-2018」 RVO-harder-than-it-looks","category":"cxx","draft":false}},"next":null}},"staticQueryHashes":["3128451518","52803243"]}